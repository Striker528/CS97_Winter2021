Lecture 5, 1-20-21

little languages for software development
	shell (finish up)
	Emacs Lisp

comman thread: 
	* extension languages for prexisting languages
		shell - you're typing commands into the computer as a part of a CLI (command line interface)
			you want to extend that set of commands
		Emacs - commands are part of a GUI (graphical user interface)
			you want to extend that set of commands
		browers do the same thing
			you wand to extend that (via JavaScript)
	* REPL (Read Eval Print Loop)

Last time in shell:
	quoting
	control flow (if then else if)
	
	variable expansion (part of bigger thing:
				transformation of a command from input form to what gets executed)

	tilde expansion (for words beginning with tilde)
		(echo ~root) : expansion to root's directory
		tilde expansion happens after variable expansion

	command substiution (for $(cmd) and `cmd`)

	Q. How does this differ from pipelining
		pipline: output of 1 command goes into the input of another command
		command sub: output of command and using it as arguments of another command. Output goes to shell, which constructs a new command from it. 

	Be careful: this is copying data into my code!
		If the data is untrustworthy, my code will be corrupted. 
		I.e., it will do the wrong thing

		f is some file imported from the web.
		$(cat f) ../e will be dangerous as you don't know the commands that someone else put there

		` is the old syntax, it had too much trouble becasue it wouldn't nest. 

	arithmetic expansion: $((x-1)) :(substract 1 from x)
		double parens for math: to distinguish it from command substitution

	field splitting 
		take a shell character that has meta characters. Involes spaces and tabs and newlines. 
		More accuratly, it involves the contents of $IFS (space, tab, newline) 

	pathname expansion:
		involves globbing patterns. 
		globbing involves file name componenets (non-/ part) and matches:
			*	matches any number of characters in a file name (but not /)
			?	matches any single character in a file name (but not /)
			[abc]	matches any character in the list (but not /)
			[a-z] 	matches any character in teh range a-z
			[!a-z]	matches any character *not* in the range a-z (but not /)
			[![:alpha:]012] 	matches any character not alphabetic or 0 or 1 or 2 (but not /)

		Lead '.' in file names is special; it must be matched explicity. "(but not /)" -> "(but not / or leading.)"


redirection (where the I/O is coming from and going to):
	standard streams
	0: input		stdin 
	1: normal output	stdout
	2: error		stderr

	cmd1 | cmd2
		Run these commands in parallel,
		attaching cmd1's stream 1 to cmd2's stream 0
		(there is no temporary file here)

	cmd1 <infile | cmd2 >outfile 2>errfile
		Run these commands in parallel
		attaching cmd1's stream 1 to cmd2's stream 0
		attach cmd1's stream 0 to 'infile'
		and cmd2's stream 1 to 'outfile'
		and cmd2's stream 2 to 'errfile'

	((a | b) 2>aberr) | c >cout
		seeing ab's error file in c

	(a 2>&1) | b
		Run A, with its stream 1 and stream 2 sent to b's stream 0


	Exist status: every command has one (success or failure) 
		(C++/C: it's the integer value that 'main' returns or 'exit (5)'.)
		0 means success
		nonzero means failure (8-bit quantitiy)
		used for control
			while cat x
			do
				(some complicated command)
			done

		Special case: exit status of a pipline is that of its last command

		cat a b c | sort | uniq	
			(uniq's exit status matters)


	Constructing shell comands. 
		1. Create a file with shell commands in it. 
			Start with '#1/bin/sh' line.
			Make the file executable. 
			It now acts like a command in its own right. 
		2. You can do a shell function (cheaper; no file).
		
			g() {cat $1 $2; return 0; }
		
		$ g a b



Now let's turn to Emacs. 
	
	a lot bigger program:

	it still has an extension language though, 

Emacs extension language is Emacs Lisp

	Aside about Lisp:
	1950's symbolic AI language
	simple language 
	easy to build data structures that represent programs
	Emacs Lisp similar to other Lisps (He'll mention when he's departing from conventional Lisp_
	lots of Lisp variants now. 
		Racket (1990's) in upper divs
		Clojure (2000's) runs atop JVM
		Hy (2010s) runs atop Python AST (abstraction machine)

Basic Emacs data structures. 
	*scratch* buffer
	C-j after expresion

	numbers evaluate to themselves 
	strings, too
	symbols are identifies (have vlaues (normal) AND they are objects themselves (Lispish))
		To see a symbol as an object, you can quote it. 
			Quoting is a big deal in Lisp (just as in sh)
			but is has a differetn flavor than the sh.
			The shell can quote only strings .
			Lisp can quote any value. 
			(want data = quote)

	Lists
		empty list () (the symbol 'nil' is equivalent)
		( 1 3 5) List with 3 elements 1, 3, 5
			Lists are constructed from pairs. 
				First item is head (list's first element)
				Second item is tail (list consisting of all the other elements)

		Lists are used to represent Emacs program

		(f a b c)
			Evaluate f, a, b, c.
			Take f's value as a function, call that function with the arguments being value of a, value of b, value of c. 

		(car (variable)) :gives 1st item
		(cdr (variable)) :gives the rest of the item except the first item

	Function:
		(defun (functionName) (parameters) 
			(what the function does to the parameters) 

	C-h b lists your key bindings







	
	
